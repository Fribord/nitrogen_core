# vim: ts=2 sw=2 et ft=org
#+STYLE: <LINK href="stylesheet.css" rel="stylesheet" type="text/css" />
#+TITLE: Nitrogen 2.x Documentation
#+AUTHOR: Jesse Gumm (@jessegumm)
#+OPTIONS:   H:2 num:1 toc:1 \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+EMAIL: 

#+TEXT: [[file:./index.org][Getting Started]] | [[file:./api.org][API]] | [[file:./elements.org][Elements]] | [[file:./actions.org][Actions]] | [[file:./validators.org][Validators]] | Handlers | [[file:./about.org][About]]
#+HTML: <div class=headline>Nitrogen Handlers</div>

* Overview

Core Nitrogen behavior has been broken out into well-defined, pluggable 
behavior modules called /handlers/. Handlers allow you to easily substitute
your own logic for things like session, security, routing, and others. Simply
create a module that implements one of the existing behaviors, and register it
to call =nitrogen:handler/2= between the =nitrogen:init_request/2= and
=nitrogen:run/0= calls found inside the =nitrogen_xxx= (where =xxx= is the
webserver used, for example 'mochiweb', 'yaws', 'cowboy', etc),

For example, let's add custom session and config handlers to our mochiweb
install. To do so, let's add our handlers to  =nitrogen_mochiweb:loop/1=:

#+BEGIN_SRC erlang
  loop(Req) ->
    {ok, DocRoot} = application:get_env(mochiweb, document_root),
    RequestBridge = simple_bridge:make_request(mochiweb_request_bridge, Req),
    ResponseBridge = simple_bridge:make_response(mochiweb_response_bridge, {Req, DocRoot}),
    nitrogen:init_request(RequestBridge, ResponseBridge),
    nitrogen:handler(my_config_handler,[]),   %% Add custom config handler
    nitrogen:handler(my_session_handler,[]),  %% Add custom session handler
    nitrogen:run().
#+END_SRC

It may seem odd to you that we're not specifying *which* handler we're actually
loading, but that's because the =nitrogen:handler/2= function determines,
based on the =behavior()= defined within the handler module, which handler it
is we're actually loading.


* Config Handler

* Log Handler

* Process Registry Handler

* Cache Handler

* Query Handler

* Session Handler

* State Handler

* Identity Handler

* Role Handler

* Route Handler

* Security Handler
