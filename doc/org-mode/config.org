# vim: ts=2 sw=2 et ft=org
#+STYLE: <LINK href="stylesheet.css" rel="stylesheet" type="text/css" />
#+TITLE: Configuration Options
#+AUTHOR: Jesse Gumm (@jessegumm)
#+OPTIONS:   H:2 num:1 toc:1 \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+EMAIL: 

#+TEXT: [[file:./index.org][Getting Started]] | [[file:./api.org][API]] | [[file:./elements.org][Elements]] | [[file:./actions.org][Actions]] | [[file:./validators.org][Validators]] | [[file:./handlers.org][Handlers]] | Configuration Options | [[file:./about.org][About]]
#+HTML: <div class=headline>Configuration Options</div>

* Configuration Overview

Nitrogen configuration is done in a handful of different configuration files,
and also varies slightly between backend servers. All of these files are found
in the =etc/= directory of your Nitrogen installation.  Below we will go though
the configuration options provided within each.

* Univeral Configuration Files (configs available in all Nitrogen intallations)

** etc/vm.args

This is the file that sends sends options to the Erlang Virtual Machine.
Basically, any of the usual 
[[http://www.erlang.org/doc/man/erl.html][erl startup parameters]] will work
here.  You'll define some standard options here, such as the node name,
(=-name=), erlang cookie (=-cookie=), some miscellaneous environment options,
and of course, to tell the system to launch the Nitrogen application upon
startup.

Here is the complete text of the default vm.args:

#+BEGIN_SRC erlang
## Name of the Nitrogen node
-name nitrogen@127.0.0.1

## Cookie for distributed erlang
-setcookie nitrogen

## Heartbeat management; auto-restarts VM if it dies or becomes unresponsive
## (Disabled by default..use with caution!)
##-heart

## Enable kernel poll and a few async threads
+K true
+A 5

## Increase number of concurrent ports/sockets
-env ERL_MAX_PORTS 4096

## Tweak GC to run more often
-env ERL_FULLSWEEP_AFTER 10

## If you run the sync application, this will switch it to
## nitrogen_mode for proper include file detection
-sync sync_mode nitrogen

## Include .beam files for site.
-pa ./site/ebin

## Include .beam files for dependencies.
-pa ./deps/*/ebin

## Run code at startup.
-eval "application:start(nitrogen)"
#+END_SRC

** etc/app.config

This file contains the configuration options for the Nitrogen application
itself. It uses the standard Erlang config syntax: (a proplist of 
={applicationName, AppOptions}=).

For the =nitrogen= application, the following =AppOptions= are recognized:

+ =signkey= :: (/String/) - =signkey= is the term that Nitrogen usees to "sign" the state information
that's sent to the client, and then resent back to the server with requests.
While Nitrogen's state info is not encrypted, this is used to help verify
that the term generated is actually generated by Nitrogen, to prevent
client-side tampering with the state.

+ =session_timeout= :: (/integer/) - =session_timeout= is the number of minutes
a session can be idle before Nitrogen expunges it from memory

+ =cookie_name= :: (/string/) - =cookie_name= is the name of the HTTP Cookie to
be used as the sesson tracking cookie. This is not to be confused with the
Erlang Cookie, which is defined in the vm.args file above.

Also typically defined in the app.config file here is the
[[http://www.erlang.org/doc/man/sasl_app.html][SASL Configuration]], the
default of which for Nitrogen can be seen here:

#+BEGIN_SRC erlang
    {sasl, [
        {sasl_error_logger, {file, "log/sasl-error.log"}},
        {errlog_type, error},
        {error_logger_mf_dir, "log/sasl"},      % Log directory
        {error_logger_mf_maxbytes, 10485760},   % 10 MB max file size
        {error_logger_mf_maxfiles, 5}           % 5 files max
    ]}
#+END_SRC

** Notable mention: rebar.config

The standard for Erlang distribution and building is the use of Basho's
[[http://github.com/basho/rebar][rebar]]. Nitrogen takes advantage of this for
simplifying the process of making releases and compiling Nitrogen even after
a release is built and deployed.

Generally, the main reason one would want to customize their installation by
adding additional dependency packages.  For example, if you wanted to include
the [[https://github.com/erlware/erlware_commons][erlware_commons]] package for
improved date parsing and formatting, or the 
[[https://github.com/shane42/erls3][erls3]] package to give your app an
interface to Amazon S3, you would typically do it by adding the dependencies to
rebar.config then running =make= in your Nitrogen installation.

By default, the only dependencies are the core dependencies for Nitrogen:
nitrogen\_core, nprocreg, sync, simple\_bridge, and a webserver (Yaws, Cowboy,
etc).

Also contained within the rebar.config are a handful of other compilation
options: minimum Erlang version, where dependencies go, and debugging options.

Below is the rebar.config file when used with webmachine:

#+BEGIN_SRC erlang
{sub_dirs, [
    "site",
    "deps"
]}.

{require_otp_vsn, "R13B04|R14|R15"}.

{cover_enabled, true}.

{erl_opts, [debug_info, fail_on_warning]}.

{deps_dir, ["lib"]}.

{deps, [
    {webmachine, "1.8.*", {git, "git://github.com/basho/webmachine.git", {tag, "webmachine-1.8.1"}}},

    {nitrogen_core, "2.1.*", {git, "git://github.com/nitrogen/nitrogen_core", "HEAD"}},
    {nprocreg,      "0.2.*", {git, "git://github.com/nitrogen/nprocreg", "HEAD"}},
    {simple_bridge, "1.2.*", {git, "git://github.com/nitrogen/simple_bridge", "HEAD"}},
    {sync,          "0.1.*", {git, "git://github.com/rustyio/sync.git", "HEAD"}}
]}.
#+END_SRC

To add the above mentioned dependencies (=erlware_commons= and =erls3=), edit
the rebar.config file and modify the =deps= list to look like this:

#+BEGIN_SRC erlang
{deps, [
    {webmachine, "1.8.*", {git, "git://github.com/basho/webmachine.git", {tag, "webmachine-1.8.1"}}},

    %% Add our two new dependencies below
    {erls3, "1.9.*", {git, "git://github.com/shane42/erls3.git", "HEAD"}},
    {erlware_commons, ".*", {git, "git://github.com/erlware/erlware_commons.git", "HEAD"}},

    {nitrogen_core, "2.1.*", {git, "git://github.com/nitrogen/nitrogen_core", "HEAD"}},
    {nprocreg,      "0.2.*", {git, "git://github.com/nitrogen/nprocreg", "HEAD"}},
    {simple_bridge, "1.2.*", {git, "git://github.com/nitrogen/simple_bridge", "HEAD"}},
    {sync,          "0.1.*", {git, "git://github.com/rustyio/sync.git", "HEAD"}}
]}.
#+END_SRC

Then run =make= from the root of your Nitrogen installation. This will download
the new dependencies and install them into the =lib= directory of your
installation.


* Server-specific Configuration (in alphabetical order)

** Cowboy: etc/cowboy.config

[[http://github.com/extend/cowboy][Cowboy]] is the web server made by
[[http://twitter.com/lhoguin][Lo√Øc Hoguin]]. The configuration for Cowboy
provided with Nitrogen isn't the /official/ configuration file, but it works
for our purposes.  The options we provide are read by Nitrogen and passed to
the Cowboy server upon initialization.

The default Cowboy configuration is as follows:

#+BEGIN_SRC erlang
[
    {cowboy,[
        {bind_address,"0.0.0.0"},
        {bind_port,8000},
        {server_name,nitrogen},
        {document_root,"./site/static"},
        {static_paths, ["js/","images/","css/","nitrogen/"]}
    ]}
].
#+END_SRC

*** =bind_address= :: (/String/)

The string of the IP address to bind.  If set to "0.0.0.0" or left blank, it'll
bind to all available addresses. (Default: ="0.0.0.0"=)

*** =bind_port= :: (/Number/)

The port number to bind. (Default: =8000=)

*** =server_name= :: (/Erlang term/)

What to name the Cowboy server. (Default: =nitrogen=)

*** =document_root= :: (/String/)

The root of the location of static resources (ie, stylesheets, javascript
files, images, etc). This will be passed to simple\_bridge for the serving of
static files. (Default: ="./site/static"=)

*Note:* this is relative to the root of the Nitrogen installation.

*** =static_paths= :: (/List of Strings/)

This setting will be used to determine if a requested resource should be
handled by Nitrogen and simple\_bridge, or if it should just be immediately
served directly by the Cowboy server. 
(Default: =["js/","images/","css/","nitrogen/"]=)

 *Note 1:* This is relative to the =document_root= above. So requests for =js/=
will be served from =./site/static/js/= (using the default above).

 *Note 2:* it is *strongly* recommended to catch static files with the
=static_paths= setting. simple\_bridge does not serve large static files in an
optimal way (it loads the files into memory completely before sending).

** Inets: etc/inets.config

** Mochiweb: etc/mochiweb.config

** Webmachine: etc/webmachine.config

** Yaws: etc/yaws.config

* See Also


