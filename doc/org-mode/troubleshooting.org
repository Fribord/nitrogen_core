# vim: ts=2 sw=2 et ft=org
#+STYLE: <LINK href="stylesheet.css" rel="stylesheet" type="text/css">
#+TITLE: Troubleshooting Nitrogen Applications
#+AUTHOR: Jesse Gumm (@jessegumm)
#+EMAIL: 

#+TEXT: [[http://nitrogenproject.com][Home]] | [[file:./index.org][Getting Started]] | [[file:./api.org][API]] | [[file:./elements.org][Elements]] | [[file:./actions.org][Actions]] | [[file:./validators.org][Validators]] | [[file:./handlers.org][Handlers]] | [[file:./config.org][Configuration Options]] | [[file:./plugins.org][Plugins]] | [[file:./about.org][About]]
#+HTML: <div class=headline>Troubleshooting</div>

* Common Questions when Troubleshooting Nitrogen Apps

  + [[0][What tools do I need for troubleshooting Nitrogen apps?]]
  + [[100][I got an error on the Erlang shell. What does it mean?]]
  + [[200][I started Nitrogen but nothing is happening. What do I do?]]
  + [[300][Why aren't postbacks working?]]
  + [[400][My postbacks aren't doing what I expect, how can I figure out what's happening?]]

* What tools do I need for troubleshooting Nitrogen apps?
# <<0>>

  Here are a few recommendations:

  + Have =sync= running. (run in the Erlang shell with =sync:go()=)

  + Have a browser with decent Javsacript debugging and network inspecting
    (Chrome's inspector, Firebug for Firefox, etc). Because Nitrogen does a lot
    of AJAX requests, you'll be watching those requests happen, and when or if
    they error out, you'll see those changes.

  + Don't be afraid to use Nitrogen's log handler with: =wf:info/1,2=,
    =wf:warning/1,2=, or =wf:error/1,2= , or send Erlang terms formatted as
    strings to the javascript console with =wf:console_log/1,2=.

  + Finally, when you're really not sure, don't be afraid to dig into the
    nitrogen source code to see what's going on.
 
* I got an error on the Erlang shell. What does it mean?
# <<100>>

  Erlang errors can be a little scary to the uninitiated, but are very helpful once you get the feel for them.  They include relatively complete stack traces, so you can see the stack of calling functions (what functions called which functions, which lead to this particular crash).
  
  Conveniently, as of R15, errors at least show line numbers, so you're no longer wading throught long, multi-clause functions to find the cause of the error. Prior to R15, tracking down the cause of an error in something like an =event= function or a `gen_server`'s `handle_call` function was a tedius endeavor.

  Anyway, here's a pretty typical-looking Nitrogen error:

#+BEGIN_SRC erlang
=INFO REPORT==== 28-Aug-2013::16:20:02 ===
  {error,error,function_clause,
         [{wf_convert,html_encode,
                      [{link,is_element,element_link,undefined,undefined,
                             undefined,true,[],[],[],[],[],"My Link",[],false,
                             true,false,false,"javascript:",undefined,undefined,
                             false,undefined,undefined},
                       true],
                      [{file,"src/lib/wf_convert.erl"},{line,93}]},
          {element_span,render_element,1,
                        [{file,"src/elements/html/element_span.erl"},{line,19}]},
          {wf_render_elements,call_element_render,3,
                              [{file,"src/lib/wf_render_elements.erl"},
                               {line,130}]},
          {wf_render_elements,render_element,1,
                              [{file,"src/lib/wf_render_elements.erl"},
                               {line,115}]},
          {wf_render_elements,render_elements,2,
                              [{file,"src/lib/wf_render_elements.erl"},
                               {line,37}]},
          {lists,foldl,3,[{file,"lists.erl"},{line,1248}]},
          {wf_render_elements,render_elements,2,
                              [{file,"src/lib/wf_render_elements.erl"},
                               {line,32}]},
          {lists,foldl,3,[{file,"lists.erl"},{line,1248}]}]}
#+END_SRC

  Understanding this error takes a little digging. The top line

#+BEGIN_SRC erlang
  {error, error, function_clause
#+END_SRC 
  
  Lets us know that a Erlang tried to call a function for which there was no
  matching clause. The next line tells us what function was attempted and what
  arguments were passed to it:

#+BEGIN_SRC erlang
   [{wf_convert,html_encode,
          [{link,is_element,element_link,undefined,undefined,
                 undefined,true,[],[],[],[],[],"My Link",[],false,
                 true,false,false,"javascript:",undefined,undefined,
                 false,undefined,undefined},
           true],
          [{file,"src/lib/wf_convert.erl"},{line,93}]},
#+END_SRC

  This tells us a lot of information. The function was =wf_convert:html_encode=
  on line 93 in ="src/lib/wf_convert.erl"= (which is actually a Nitrogen core
  module). /Generally, if the module name starts with =wf_=, it's probably part
  of Nitrogen core/.
  
  The first argument was that huge tuple that starts with ={link=, and the
  second argument was the atom =true=.  This is already giving us a good hint
  as to the cause of the error.

  Because Nitrogen elements are simply Erlang records, and Erlang records are
  just syntactic sugar for tuples, we can conclude based on
  ={link, is_element,...= that the argument that's causing problems is a
  =#link= element somewhere in our code.
  
  But if the cause is still not clear, let's go deeper.  The next chunk of the error is this:

#+BEGIN_SRC erlang
    {element_span,render_element,1,
        [{file,"src/elements/html/element_span.erl"},{line,19}]},
#+END_SRC

  This tells us that the =element_span:render_element= function is calling function. We can imply from this that there is a =#span= element containing a =#link= element, and something about that is causing a crash.

  If we look at the code of our page, we'll see this line:

#+BEGIN_SRC erlang
   #span{text=#link{text="My Link"}},
#+END_SRC

  The error reveals itself: the problem is that you can't pass Nitrogen
  elements into a =text= attribute. The =text= attribute of the =#span= element
  attempts to call =html_encode= on the =#link= element, but =html_encode= only
  accepts text (strings and binaries), so it crashes.

  This has been a rather contrived example, but it's the kind of error you may
  run into. Dialyzer support has been added to help eliminate some of this class of error.

  If you're really stuck, run dialyzer:

  : make dialyzer

  Which might give a message like this:

#+BEGIN_SRC erlang
index.erl:30: Record construction #span{is_element::'is_element',module::'element_span',
show_if::'true',class::[],style::[],html_id::[],data_fields::[],body::[],
text::#link{is_element::'is_element',module::'element_link',show_if::'true',class::[],
style::[],html_id::[],data_fields::[],title::[],text::[32 | 76 | 77 | 105 | 107 | 110
| 121,...],body::[],new::'false',html_encode::'true',mobile_target::'false',
mobile_dialog::'false',url::[58 | 97 | 99 | 105 | 106 | 112 | 114 | 115 | 116 | 118,...],
handle_invalid::'false'},title::[],html_encode::'true'} violates the declared type of
field text::binary() | maybe_improper_list(binary() | maybe_improper_list(any(),binary()
| []) | char(),binary() | [])
#+END_SRC

  And while this is a hugely long error, the key informaton is the =Record
  contruction #span= is the culprit, and the reason it's failing is =violates the
  declared type of field text::...=. This is telling us that something is wrong
  with the =text= field, as it's expecting something other than what it was
  given.

* I started Nitrogen but nothing is happening. What do I do?
# <<200>>

  This is a very general kind of issue, and can be any number of the following:

  + If Erlang crashes right from the get-go, make sure you don't already have
    that port in use, and make sure you have access to open the specified port in
    app.config.

  + If Erlang launches without crashing, but the page http://127.0.0.1:8000
    isn't responding, then either you want to make sure that you don't have a
    firewall blocking that port from being bound.  Also make sure your config is
    binding to the right IP address. ="0.0.0.0"= or ={0,0,0,0}= (depending on
    server config) will bind to any of the machine's IPs.

  + If neither of the above solve your problem, there might be something more
    significant. Feel free to email the
    [[https://groups.google.com/d/forum/nitrogenweb][Mailing List]]

* Why aren't postbacks working?
# <<300>>

* My postbacks aren't doing what I expect, how can I figure out what's happening?
# <<400>>
